name: Kong Gateway Security Scan

on:
  push:
    branches:
      - main

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}/kong-gateway
      KONG_VERSION: "3.9.0"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull Kong Gateway ARM64 image
        run: |
          echo "Pulling Kong Gateway ARM64 image..."
          docker pull --platform linux/arm64 kong:${{ env.KONG_VERSION }}
      
      - name: Tag and push to GHCR
        run: |
          echo "Tagging image for GHCR..."
          docker tag kong/kong-gateway:${{ env.KONG_VERSION }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.KONG_VERSION }}
          docker tag kong/kong-gateway:${{ env.KONG_VERSION }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          echo "Pushing to GHCR..."
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.KONG_VERSION }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      
      - name: Install Trivy
        run: |
          echo "Installing Trivy..."
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
      
      - name: Run Trivy vulnerability scan
        id: trivy-scan
        run: |
          echo "Running Trivy vulnerability scan..."
          
          # Trivyスキャンを実行してJSONで結果を出力
          trivy image --format json --output trivy-results.json ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # HIGH, CRITICALの脆弱性件数をカウント
          HIGH_COUNT=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length')
          CRITICAL_COUNT=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
          
          echo "HIGH vulnerabilities: $HIGH_COUNT"
          echo "CRITICAL vulnerabilities: $CRITICAL_COUNT"
          
          # 環境変数に設定
          echo "HIGH_COUNT=$HIGH_COUNT" >> $GITHUB_ENV
          echo "CRITICAL_COUNT=$CRITICAL_COUNT" >> $GITHUB_ENV
          
          # 結果をサマリーに出力
          echo "## Trivy Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **HIGH vulnerabilities:** $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **CRITICAL vulnerabilities:** $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
      
      - name: Display scan results
        run: |
          echo "=== Trivy Scan Summary ==="
          echo "HIGH vulnerabilities: ${{ env.HIGH_COUNT }}"
          echo "CRITICAL vulnerabilities: ${{ env.CRITICAL_COUNT }}"
          
          if [ "${{ env.HIGH_COUNT }}" -eq 0 ] && [ "${{ env.CRITICAL_COUNT }}" -eq 0 ]; then
            echo "✅ No HIGH or CRITICAL vulnerabilities found!"
          else
            echo "❌ HIGH or CRITICAL vulnerabilities found!"
          fi
      
      - name: Clean up and fail if vulnerabilities found
        if: env.HIGH_COUNT != '0' || env.CRITICAL_COUNT != '0'
        run: |
          echo "HIGH or CRITICAL vulnerabilities detected. Cleaning up..."
          
          # GHCRからイメージを削除
          echo "Deleting images from GHCR..."
          
          # GitHub CLI を使用してパッケージを削除
          gh api --method DELETE /user/packages/container/${{ github.repository }}-kong-gateway/versions \
            --jq '.[] | select(.metadata.container.tags[] | contains("${{ env.KONG_VERSION }}")) | .id' \
            | xargs -I {} gh api --method DELETE /user/packages/container/${{ github.repository }}-kong-gateway/versions/{}
          
          gh api --method DELETE /user/packages/container/${{ github.repository }}-kong-gateway/versions \
            --jq '.[] | select(.metadata.container.tags[] | contains("latest")) | .id' \
            | xargs -I {} gh api --method DELETE /user/packages/container/${{ github.repository }}-kong-gateway/versions/{}
          
          echo "Images deleted from GHCR"
          echo "Workflow failed due to security vulnerabilities"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Success message
        if: env.HIGH_COUNT == '0' && env.CRITICAL_COUNT == '0'
        run: |
          echo "✅ Security scan passed! Kong Gateway image successfully stored in GHCR."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"